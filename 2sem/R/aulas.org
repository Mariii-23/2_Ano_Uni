#+TITLE: Aulas

* 23-02-2020 -> Apresentação
** Avaliação:
+ 2 testes (50%)
*** Teste:
  + 20 perguntas
  + 2 horas (6 mins por pergunta)
  + Perguntas de :
    - Escolha multipla
    - Verdadeiros e Falsos
    - Resposta breve
  + 1 Pergunta de cada vez
  + Não se pode voltar a tras
  + Ao entregar ficamos a saber a nota das perguntas de escolha multipla e dos V/F
*** Notas:
+ Usar cat e nao print (a stora gosta mais)

** R with emacs
*** Term
> M-x "R"
*** C-c C-e
*** C-c C-c ??

*** Esc-p Previous Command (at command line)
*** Esc-n Next Command (at command line)
*** C-c C-v Get help on R/S object (enter name in
*** C-c C-d Dump object or function to a Emacs buffer for editing
*** C-c C-l Load file from buffer into R
*** C-c C-f submit a Function in current buffer to R
*** C-c C-j submit the current line in buffer to R
*** C-c C-r submit the highlignted or marked region to R
*** C-c TAB complete object/file name
*** C-h m for help on ESS mode

** R
*** 1 aula
#+begin_SRC R

x<-4
y<-10
class(y)
z<-5L
typeof(z)x<-4

# vetor
plot(2:8)

table(c(4,4,4,5,6,7,7,7,7,7,7,5))

plot(table(c(4,4,4,5,6,7,7,7,7,7,7,5)))
    
meu.vetor<-c(4,5)
length(meu.vetor)
class(meu.vetor)
# estrutura do objeto
str(meu.vetor) 

# coerção implicita
(vec<-c("Maria",4))
class(vec)

# coerçao implicita
(vec2<-c(4,False,True)) 
class(vec2)

# coerçao explicita
as.numeric(False)

as.numeric("jao")

# devolve NA (Not available) -> Falta de informação

class(NA)
typeof(NA)

# Function
f <- function() {
  ##some
  print("Hello World!")
  print("LinuxHint")
  print(5+6)
 }


v<-c(8,9,7,45,7,8,9,2)
length(v)
# media
# seew information about mean
mean(v)

# notacao rapida para sequencias
2:8
8:2

# passar argumentos por posicao
# start end espacamento
seq(0,1,0.05)
seq(0,1,length.out=10)

# funcao search()

#+end_SRC

#+RESULTS:
*** 2 aula
#+begin_SRC R

# vetores com inteiros
v <- c(3L,5L,7L)

idades <- c(3L, 20L,NA, 33L, 44L, NA,100L)
# verifica se existem Na no array
is.na(idades)

#+end_SRC

#+RESULTS:
| 3 |
| 5 |
| 7 |
*** 3 aula
#+begin_SRC R
# diferenca entre & e &&
## & faz com os vectores e && faz apenas para o primeiro elemento
#+end_SRC
*** 4 aula
**** If
#+begin_SRC R
if( condicao ){
 Se a condicao for TRUE faz isto
   ....
} else {
  Caso contrario faz isto
    ....
}
#+end_SRC
***** if com vetores
#+begin_SRC R
xx<-c(23,40,NA,50,NA)
# ifesle(condicao, se true faz isto, se false faz isto)
x<-ifelse(is.na(xx),99,xx)
#+end_SRC

#+RESULTS:
| 23 |
| 40 |
| 99 |
| 50 |
| 99 |

**** cat
#+begin_SRC R
temp_min <- -5
cat("Introduza o valor da temperatura:")
temp>-as.numeric(readline())

if (temp < -5){
  # Stop -> erro
  stop("A temperatura não pode ser inferior a -5.")
}
else{
  message("A temperatura não é inferior a -5 .")
}
#+end_SRC
**** Operacoes logicas
***** a && b
Operacao logica com valores numericos
Coercao implicita -- qualquer numero
***** a & b
Versao vetorizavel
Avalia todas as entradas.
**** Funcao
#+begin_SRC R
f <- function(x){
  x<-ifelse(is.na(x),99,x+5)
}

f2 <- function(x){
  ifelse(is.na(x),print("O valor é NA"),x+5)
}
r<-f(c(4,-9,NA))

r1<-f2(c(4,-9,NA))

ola<-append(r, c(" "))
ola<-append(ola, r1)
#+end_SRC

#+RESULTS:
|            9 |
|           -4 |
|           99 |
|              |
|            9 |
|           -4 |
| O valor é NA |
*** 5 aula
**** Funcao
#+begin_SRC R
num<-as.numeric(readline(prompt="Escreva um numero natural:"))

f<-function(){
  x<-1
  x+5
}

body(f)
formals(f) # NULL Argumentos da funcao

g<-function(a,b){
  x<-a^2
  print(x)
  y<-a+b
  c(x,y)
}

exist("a")-> ver se existe um objeto chamado a . 
#+end_SRC
*** 6 aula
**** Vetores com nome
#+begin_SRC R
x<-c(Nome = "Maria", Idade = 23)
x


#+end_SRC

#+RESULTS:
| Nome  | Idade |
| Maria |    23 |
**** Warnings
#+begin_SRC R

f<-function(a,x){
    if(x%%a!=0) stop("error")
    else warning("error")
    x %% a
} 

#Com o stop ele para
#Com o warning ele continua

f(3,4)

f(x = 3) # falta o a
#+end_SRC

**** Estrutura homogenia
+ R converte todos os dados para o mesmo tipo
#+begin_SRC R
x<-c(TRUE,FALSE,3,-5,8)
x

cat("Ola")
(x<-c(TRUE,FALSE,-5,8,TRUE))
#+end_SRC

#+RESULTS:
|  1 |
|  0 |
| -5 |
|  8 |
|  1 |
**** readline e scan
#+begin_SRC R
frase <-readline()
# Maria ola
#frase : "Maria ola"

palavras<-scan()
# Maria ola
#palavras : "Maria" "ola"

numeros <-scan()
## 1 2 9 0 1
## numeros: 1 2 9 0 1

num<-as.numeric(readline())
#+end_SRC

**** Vetor com nomes
#+begin_SRC R
v<-1:26

names(v)<-letters
v

names(v)<-LETTERS
v

v[c("d","h","k")]
#+end_SRC
letters
 a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q
 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17
 r  s  t  u  v  w  x  y  z
18 19 20 21 22 23 24 25 26

LETTERS:
 A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q
 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17
 R  S  T  U  V  W  X  Y  Z
18 19 20 21 22 23 24 25 26

+ v[c("d","h","k")]
 d  h  k
 4  8 11
 
+ v[c("d","h","k","aa")]
   d    h    k <NA>
   4    8   11   NA

+ v[c("d","h","k","aa")]<-NA

+ v
 a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q
 1  2  3 NA  5  6  7 NA  9 10 NA 12 13 14 15 16 17
 r  s  t  u  v  w  x  y  z aa
 18 19 20 21 22 23 24 25 26 NA

+ is.na(v)
        a     b     c     d     e     f     g     h
    FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE
        i     j     k     l     m     n     o     p
    FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE
        q     r     s     t     u     v     w     x
    FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
        y     z    aa
    FALSE FALSE  TRUE

+ any.na(v)
  TRUE

+ v[is.na(v)]
   d  h  k aa
   NA NA NA NA

+ which(is.na(v))
 d  h  k aa
 4  8 11 27  #indices

+ unname(which(is.na(v)))
    [1]  4  8 11 27

+ table(is.na(v))
   FALSE  TRUE
      23     4

+ v[which(letters=="d"):which(letters=="h")]

**** Notas
#+begin_SRC R
Filter(funcao q retorna T ou F, vetor)

retorna todos os elementos q verificam a dada expressao

str() -> devolve a estrutura do objeto

search() -> package do sistema

a<-function(n){
  n%%2==0
}

ola <- function(n) {
  Filter(a,n)
}

ola(1:7)
#+end_SRC
