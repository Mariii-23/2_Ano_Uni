#+TITLE: Aulas

* 23-02-2020 -> Apresentação
** Avaliação:
+ 2 testes (50%)
*** Teste:
  + 20 perguntas
  + 2 horas (6 mins por pergunta)
  + Perguntas de :
    - Escolha multipla
    - Verdadeiros e Falsos
    - Resposta breve
  + 1 Pergunta de cada vez
  + Não se pode voltar a tras
  + Ao entregar ficamos a saber a nota das perguntas de escolha multipla e dos V/F
*** Notas:
+ Usar cat e nao print (a stora gosta mais)

** R with emacs
*** Term
> M-x "R"
*** C-c C-e
*** C-c C-c ??

*** Esc-p Previous Command (at command line)
*** Esc-n Next Command (at command line)
*** C-c C-v Get help on R/S object (enter name in
*** C-c C-d Dump object or function to a Emacs buffer for editing
*** C-c C-l Load file from buffer into R
*** C-c C-f submit a Function in current buffer to R
*** C-c C-j submit the current line in buffer to R
*** C-c C-r submit the highlignted or marked region to R
*** C-c TAB complete object/file name
*** C-h m for help on ESS mode

** R
*** 1 aula
#+begin_SRC R

x<-4
y<-10
class(y)
z<-5L
typeof(z)x<-4

# vetor
plot(2:8)

table(c(4,4,4,5,6,7,7,7,7,7,7,5))

plot(table(c(4,4,4,5,6,7,7,7,7,7,7,5)))
    
meu.vetor<-c(4,5)
length(meu.vetor)
class(meu.vetor)
# estrutura do objeto
str(meu.vetor) 

# coerção implicita
(vec<-c("Maria",4))
class(vec)

# coerçao implicita
(vec2<-c(4,False,True)) 
class(vec2)

# coerçao explicita
as.numeric(False)

as.numeric("jao")

# devolve NA (Not available) -> Falta de informação

class(NA)
typeof(NA)

# Function
f <- function() {
  ##some
  print("Hello World!")
  print("LinuxHint")
  print(5+6)
 }


v<-c(8,9,7,45,7,8,9,2)
length(v)
# media
# seew information about mean
mean(v)

# notacao rapida para sequencias
2:8
8:2

# passar argumentos por posicao
# start end espacamento
seq(0,1,0.05)
seq(0,1,length.out=10)

# funcao search()

#+end_SRC

#+RESULTS:
*** 2 aula
+ Vetores
#+begin_SRC R

# vetores com inteiros
v <- c(3L,5L,7L)

idades <- c(3L, 20L,NA, 33L, 44L, NA,100L)
# verifica se existem Na no array
is.na(idades)

#+end_SRC

#+RESULTS:
| 3 |
| 5 |
| 7 |
*** 3 aula
+ & e &&
#+begin_SRC R
# diferenca entre & e &&
## & faz com os vectores e && faz apenas para o primeiro elemento
#+end_SRC
*** 4 aula
**** If
#+begin_SRC R
if( condicao ){
 Se a condicao for TRUE faz isto
   ....
} else {
  Caso contrario faz isto
    ....
}
#+end_SRC
***** if com vetores
#+begin_SRC R
xx<-c(23,40,NA,50,NA)
# ifesle(condicao, se true faz isto, se false faz isto)
x<-ifelse(is.na(xx),99,xx)
#+end_SRC

#+RESULTS:
| 23 |
| 40 |
| 99 |
| 50 |
| 99 |

**** cat
#+begin_SRC R
temp_min <- -5
cat("Introduza o valor da temperatura:")
temp>-as.numeric(readline())

if (temp < -5){
  # Stop -> erro
  stop("A temperatura não pode ser inferior a -5.")
}
else{
  message("A temperatura não é inferior a -5 .")
}
#+end_SRC
**** Operacoes logicas
***** a && b
Operacao logica com valores numericos
Coercao implicita -- qualquer numero
***** a & b
Versao vetorizavel
Avalia todas as entradas.
**** Funcao
#+begin_SRC R
f <- function(x){
  x<-ifelse(is.na(x),99,x+5)
}

f2 <- function(x){
  ifelse(is.na(x),print("O valor é NA"),x+5)
}
r<-f(c(4,-9,NA))

r1<-f2(c(4,-9,NA))

ola<-append(r, c(" "))
ola<-append(ola, r1)
#+end_SRC

#+RESULTS:
|            9 |
|           -4 |
|           99 |
|              |
|            9 |
|           -4 |
| O valor é NA |
*** 5 aula
**** Funcao
#+begin_SRC R
num<-as.numeric(readline(prompt="Escreva um numero natural:"))

f<-function(){
  x<-1
  x+5
}

body(f)
formals(f) # NULL Argumentos da funcao

g<-function(a,b){
  x<-a^2
  print(x)
  y<-a+b
  c(x,y)
}

exist("a")-> ver se existe um objeto chamado a . 
#+end_SRC
*** 6 aula
**** Vetores com nome
#+begin_SRC R
x<-c(Nome = "Maria", Idade = 23)
x


#+end_SRC

#+RESULTS:
| Nome  | Idade |
| Maria |    23 |
**** Warnings
#+begin_SRC R

f<-function(a,x){
    if(x%%a!=0) stop("error")
    else warning("error")
    x %% a
} 

#Com o stop ele para
#Com o warning ele continua

f(3,4)

f(x = 3) # falta o a
#+end_SRC

**** Estrutura homogenia
+ R converte todos os dados para o mesmo tipo
#+begin_SRC R
x<-c(TRUE,FALSE,3,-5,8)
x

cat("Ola")
(x<-c(TRUE,FALSE,-5,8,TRUE))
#+end_SRC

#+RESULTS:
|  1 |
|  0 |
| -5 |
|  8 |
|  1 |
**** readline e scan
#+begin_SRC R
frase <-readline()
# Maria ola
#frase : "Maria ola"

palavras<-scan()
# Maria ola
#palavras : "Maria" "ola"

numeros <-scan()
## 1 2 9 0 1
## numeros: 1 2 9 0 1

num<-as.numeric(readline())
#+end_SRC

**** Vetor com nomes
#+begin_SRC R
v<-1:26

names(v)<-letters
v

names(v)<-LETTERS
v

v[c("d","h","k")]
#+end_SRC
letters
 a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q
 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17
 r  s  t  u  v  w  x  y  z
18 19 20 21 22 23 24 25 26

LETTERS:
 A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q
 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17
 R  S  T  U  V  W  X  Y  Z
18 19 20 21 22 23 24 25 26

+ v[c("d","h","k")]
 d  h  k
 4  8 11
 
+ v[c("d","h","k","aa")]
   d    h    k <NA>
   4    8   11   NA

+ v[c("d","h","k","aa")]<-NA

+ v
 a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q
 1  2  3 NA  5  6  7 NA  9 10 NA 12 13 14 15 16 17
 r  s  t  u  v  w  x  y  z aa
 18 19 20 21 22 23 24 25 26 NA

+ is.na(v)
        a     b     c     d     e     f     g     h
    FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE
        i     j     k     l     m     n     o     p
    FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE
        q     r     s     t     u     v     w     x
    FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
        y     z    aa
    FALSE FALSE  TRUE

+ any.na(v)
  TRUE

+ v[is.na(v)]
   d  h  k aa
   NA NA NA NA

+ which(is.na(v))
 d  h  k aa
 4  8 11 27  #indices

+ unname(which(is.na(v)))
    [1]  4  8 11 27

+ table(is.na(v))
   FALSE  TRUE
      23     4

+ v[which(letters=="d"):which(letters=="h")]

**** Notas
#+begin_SRC R
Filter(funcao q retorna T ou F, vetor)

retorna todos os elementos q verificam a dada expressao

str() -> devolve a estrutura do objeto

search() -> package do sistema

a<-function(n){
  n%%2==0
}

ola <- function(n) {
  Filter(a,n)
}

ola(1:7)
#+end_SRC
*** 7 aula (depois do  teste)
**** Matrizes
***** Criacao
#+begin_SRC R
m<-matrix()
m
# NA

class(m) # diferente de null

dim(m) # 1 1


m[2,3]<-4
# da erro, devido ao facto de estar
# fora dos limites da matriz
#+end_SRC

+ Criacao de matrix por defeito
  Por defeito faz por colunas
#+begin_SRC R
(m<-matrix(1:5))
#+end_SRC

#+RESULTS:
| 1 |
| 2 |
| 3 |
| 4 |
| 5 |

+ Organiza a matrix por n colunas do mesmo tamanho
#+begin_SRC R
(m<-matrix(1:5,nc = 2))
#+end_SRC

#+RESULTS:
| 1 | 4 |
| 2 | 5 |
| 3 | 1 |

+ Organiza a matrix por n linhas do mesmo tamanho
#+begin_SRC R
(m<-matrix(1:10,nr = 2, byrow=TRUE))
#+end_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 |  5 |
| 6 | 7 | 8 | 9 | 10 |

+ Criacao de matrix sem o matrix()
#+begin_SRC R
v<-c(10:13)
w<-(seq(0,1,length.out=4))
x<-(seq(-7,4,length.out=4))

(mat<-rbind(v,w,x))
rownames(mat)
#+end_SRC

#+RESULTS:
| 10 |                11 |                12 | 13 |
|  0 | 0.333333333333333 | 0.666666666666667 |  1 |
| -7 | -3.33333333333333 | 0.333333333333333 |  4 |

| v |
| w |
| x |

***** Aceder
+ 1 elem , 1 coluna ou 1 linha
    #+begin_SRC R
    (Mat<-matrix(1:20,nr = 4, byrow=TRUE))
    Mat[2,3]
    Mat[,3]
    Mat[1,]

    diag(Mat)
    upper.tri(Mat,diag=TRUE)
    #+end_SRC

    #+RESULTS:
    |  1 |  2 |  3 |  4 |  5 |
    |  6 |  7 |  8 |  9 | 10 |
    | 11 | 12 | 13 | 14 | 15 |
    | 16 | 17 | 18 | 19 | 20 |

    : 8

    |  3 |
    |  8 |
    | 13 |
    | 18 |

    |  1 | 2 | 3 | 4 | 5 |

    |  1 |
    |  7 |
    | 13 |
    | 19 |

    | TRUE  | TRUE  | TRUE  | TRUE | TRUE |
    | FALSE | TRUE  | TRUE  | TRUE | TRUE |
    | FALSE | FALSE | TRUE  | TRUE | TRUE |
    | FALSE | FALSE | FALSE | TRUE | TRUE |

+ Verificacao
 #+begin_SRC R
 (Mat<-matrix(1:20,nr = 4, byrow=TRUE))
 Mat<-cbind(Mat,c(NA,-9,NA,NA,NA))
 which(is.na(Mat))
 which(is.na(Mat),arr.ind=TRUE)
 Mat[which(is.na(Mat),arr.ind=TRUE)]<-999
 Mat
 #+end_SRC 

 #+RESULTS:
 |  1 |  2 |  3 |  4 |  5 | NA |
 |  6 |  7 |  8 |  9 | 10 | -9 |
 | 11 | 12 | 13 | 14 | 15 | NA |
 | 16 | 17 | 18 | 19 | 20 | NA |

 | 21 |
 | 23 |
 | 24 |

 | 1 | 6 |
 | 3 | 6 |
 | 4 | 6 |

 |  1 |  2 |  3 |  4 |  5 | 999 |
 |  6 |  7 |  8 |  9 | 10 |  -9 |
 | 11 | 12 | 13 | 14 | 15 | 999 |
 | 16 | 17 | 18 | 19 | 20 | 999 |

+ Soma de matrizes
 #+begin_SRC R
 (Mat<-matrix(1:20,nr = 4, byrow=TRUE))
 (M<-matrix(1:10,nc = 2 , byrow=TRUE))

 Mat+M # como nao tem a mesma dimensao
       # irá dar erro
 Mat + Mat
 #+end_SRC

 #+RESULTS:

 |  1 |  2 |  3 |  4 |  5 |
 |  6 |  7 |  8 |  9 | 10 |
 | 11 | 12 | 13 | 14 | 15 |
 | 16 | 17 | 18 | 19 | 20 |

 | 1 |  2 |
 | 3 |  4 |
 | 5 |  6 |
 | 7 |  8 |
 | 9 | 10 |

 : error

 |  2 |  4 |  6 |  8 | 10 |
 | 12 | 14 | 16 | 18 | 20 |
 | 22 | 24 | 26 | 28 | 30 |
 | 32 | 34 | 36 | 38 | 40 |

+ Multiplicacao
 #+begin_SRC R
 (Mat<-matrix(1:4,nc = 2, byrow=TRUE))
 (M<-matrix(8:11,nc = 2, byrow=TRUE))

 # Elemento a elemento
 Mat*M

 # Multiplicacao da algebra linear
 Mat%*%M

 solve(Mat)
 #+end_SRC

 #+RESULTS:

 | 1 | 2 |
 | 3 | 4 |

 |  8 |  9 |
 | 10 | 11 |

 |  8 | 18 |
 | 30 | 44 |

 | 28 | 31 |
 | 64 | 71 |

 |  -2 |    1 |
 | 1.5 | -0.5 |

+ Funcao outer e somatorios
 #+begin_SRC R
 (Mat<-matrix(1:25,nc = 5, byrow=TRUE))

 # sum_{i=1 to 5} sum_{j=1 to 5} i+j
 m<-outer(1:5,1:5,"+")

 m<-outer(1:5,1:5,function(i,j){(2*i+j)/(i*j)})

 m<-outer(1:5,1:4,function(i,j){(j>i)/(i+j)})
 #+end_SRC

 #+RESULTS:

 #Mat
 |  1 |  2 |  3 |  4 |  5 |
 |  6 |  7 |  8 |  9 | 10 |
 | 11 | 12 | 13 | 14 | 15 |
 | 16 | 17 | 18 | 19 | 20 |
 | 21 | 22 | 23 | 24 | 25 |

 #m<-outer(1:5,1:5,"+")
 | 2 | 3 | 4 | 5 |  6 |
 | 3 | 4 | 5 | 6 |  7 |
 | 4 | 5 | 6 | 7 |  8 |
 | 5 | 6 | 7 | 8 |  9 |
 | 6 | 7 | 8 | 9 | 10 |

 #m<-outer(1:5,1:5,function(i,j){(2*i+j)/(i*j)})
 |                3 |                2 |  1.66666666666667 |               1.5 |               1.4 |
 |              2.5 |              1.5 |  1.16666666666667 |                 1 |               0.9 |
 | 2.33333333333333 | 1.33333333333333 |                 1 | 0.833333333333333 | 0.733333333333333 |
 |             2.25 |             1.25 | 0.916666666666667 |              0.75 |              0.65 |
 |              2.2 |              1.2 | 0.866666666666667 |               0.7 |               0.6 |

 #m<-outer(1:5,1:4,function(i,j){(j>i)/(i+j)})
 | 0 | 0.333333333333333 | 0.25 |               0.2 |
 | 0 |                 0 |  0.2 | 0.166666666666667 |
 | 0 |                 0 |    0 | 0.142857142857143 |
 | 0 |                 0 |    0 |                 0 |
 | 0 |                 0 |    0 |                 0 |

+ Mais funcoes especias de matrizes
 #+begin_SRC R
 set.seed(123)

 m<-matrix( sample(c(1:89,rep(NA,11))),nc=10)

 # somar colunas
 colSum(m,na.rm=TRUE)
 # somar linhas
 rowSum(m,na.rm=TRUE)

 # media colunas
 colMeans(m,na.rm=TRUE)
 # media linhas
 rowMeans(m,na.rm=TRUE)

 mean(m,na.rm=TRUE)
 sd(m,na.rm=TRUE)

 # desvio padra dos elementos de cada coluna da matrix
 # com for:

 dp<-c()

 for(j in 1:10){
   dp[j]<-sd(matriz[,j])
 }

 dp
 #+end_SRC 

 #+RESULTS:

+ funcao apply()
 #+begin_SRC R
 set.seed(123)

 m<-matrix( sample(c(1:89,rep(NA,11))),nc=10)

 apply(m,2,sd,na.rm = T)
 #+end_SRC

 #+RESULTS:

 | 31 |    | 78 | 60 |  8 | 73 |    | 19 | 59 | 56 |
 | 79 | 69 |    | 53 | 12 | 47 | 39 | 54 | 48 | 11 |
 | 51 | 57 | 76 | 75 | 13 | 85 | 49 | 20 | 24 | 55 |
 | 14 |  9 | 15 | 89 | 18 |    | 17 | 80 | 45 | 37 |
 | 67 | 72 | 32 | 71 | 33 | 16 | 63 | 62 | 81 |  2 |
 | 42 | 26 | 84 | 38 | 66 | 30 |  4 |    | 68 | 28 |
 | 50 |  7 | 82 |    | 64 |  6 | 58 | 86 | 88 | 74 |
 | 43 |    | 41 | 34 | 65 |    | 61 |  3 |    | 35 |
 |    | 87 | 23 | 29 | 21 | 70 | 40 | 83 | 44 | 52 |
 | 25 | 36 | 27 |  5 | 77 | 22 |    | 46 | 10 |  1 |

 | 20.2175666191557 |
 | 30.2226854247884 |
 | 28.5501508071518 |
 | 26.3633794832487 |
 | 27.1295247122229 |
 | 29.5535228743667 |
 | 21.3336588516832 |
 | 30.6797979132849 |
 | 25.2954760997122 |
 | 24.7765570202516 |

***** Data frame
 Estruturas de dados retangulares

 Num data frame as colunas têm que ter o mesmo número mas as colunas podem ser de qualquer tipo (ao contrario das matizes).

 #+begin_SRC R
 head(iris)
 #+end_SRC

 #+RESULTS:

 | Sepa.Length | Spal.Width | Petal.Length |
 |         5.1 |        3.5 |          1.4 |
 |         4.9 |          3 |          1.4 |
 |         4.7 |        3.2 |          1.3 |
 |         4.6 |        3.1 |          1.5 |
 |           5 |        3.6 |          1.4 |
 |         5.4 |        3.9 |          1.7 |

 | Pedal.Width | Species |
 |         0.2 | setosa  |
 |         0.2 | setosa  |
 |         0.2 | setosa  |
 |         0.2 | setosa  |
 |         0.2 | setosa  |
 |         0.4 | setosa  |

+ Inicializacao
 #+begin_SRC R
 # vazia
 df<-data.frame()

 df<-data.frame(1:26,letters)

 colnames(df)
 #+end_SRC

 #+RESULTS:

 #df<-data.frame(1:26,letters)
 |  1 | a |
 |  2 | b |
 |  3 | c |
 |  4 | d |
 |  5 | e |
 |  6 | f |
 |  7 | g |
 |  8 | h |
 |  9 | i |
 | 10 | j |
 | 11 | k |
 | 12 | l |
 | 13 | m |
 | 14 | n |
 | 15 | o |
 | 16 | p |
 | 17 | q |
 | 18 | r |
 | 19 | s |
 | 20 | t |
 | 21 | u |
 | 22 | v |
 | 23 | w |
 | 24 | x |
 | 25 | y |
 | 26 | z |

 #colnames(df)
 | X1.26   |
 | letters |
